<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>MQTT Node.js Subscriber</title>
    <style>
      *,
      *:before,
      *:after {
        box-sizing: border-box;
      }

      .line {
        border: 3px solid red;
        width: 200px;
      }
      /****** Styling for the Layout ***********/
      .wrapper {
        background-color: rgb(247, 244, 244);
        list-style-type: none;
        padding: 0;
        border-radius: 5px;
      }
      .form-row {
        display: flex;
        justify-content: flex-end;
        padding: 0.5em;
      }
      .form-row > label {
        padding: 1em;
        flex: 1;
        font-size: 1.2em;
        font-weight: bold;
      }
      .form-row > input,
      .form-row > textarea {
        flex: 2;
      }
      .form-row > input,
      .form-row > button,
      .form-row > textarea {
        padding: 0.5em;
        resize: vertical;
        margin: 10px 0;
        box-shadow: 0 0 15px 4px rgba(0, 0, 0, 0.06);
        border-radius: 10px;
        font-size: 1.2em;
      }
      .form-row > textarea {
        font-size: 1.5em;
        background-color: rgb(242, 248, 248);
        text-align: center;
        font-weight: bold;
      }
      .btn-container {
        flex: 3;
        column-gap: 10px;
        display: flex;
      }
      .btn-container > button {
        width: 50%;
        border: 0;
        padding: 1em;
        box-shadow: 0 0 15px 4px rgba(0, 0, 0, 0.06);
        border-radius: 10px;
        color: white;
        font-size: 1.2em;
      }

      #subscribe {
        background-color: green;
      }
      #unsubscribe {
        background-color: rgb(176, 6, 6);
      }

      #status {
        background-color: lightcyan;
        text-align: center;
        font-weight: bold;
      }

    </style>
    <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>
  </head>
  <body>
    <h1>MQTT Node.js</h1>
    <h2>Subscriber</h2>
    <div class="line"></div>
    <ul class="wrapper">
      <li class="form-row">
        <label for="topic">Topic</label>
        <input type="text" id="topic" />
      </li>
      <li class="form-row">
        <label for="message">Message</label>
        <textarea id="message" name="message" rows="10" readonly></textarea>
      </li>
      <li class="form-row">
        <label for="status">Status</label>
        <input type="text" id="status" readonly />
      </li>
      <li class="form-row">
        <div class="btn-container">
          <button type="button" id="subscribe">Subscribe</button>
          <button type="button" id="unsubscribe">Unsubscribe</button>
        </div>
      </li>
    </ul>
    <script>

      let mqttClient;

      window.addEventListener("load", (event) => {
        connectToBroker();

        const subscribeBtn = document.querySelector("#subscribe");
        subscribeBtn.addEventListener("click", function () {
          subscribeToTopic();
        });

        const unsubscribeBtn = document.querySelector("#unsubscribe");
        unsubscribeBtn.addEventListener("click", function () {
          unsubscribeToTopic();
        });
      });

      function connectToBroker() {
        const clientId = "client" + Math.random().toString(36).substring(7);

        // Change this to point to your MQTT broker
        const host = "ws://127.0.0.1:9001/mqtt";

        const options = {
          keepalive: 60,
          clientId: clientId,
          protocolId: "MQTT",
          protocolVersion: 4,
          clean: true,
          reconnectPeriod: 1000,
          connectTimeout: 30 * 1000,
        };

        mqttClient = mqtt.connect(host, options);

        mqttClient.on("error", (err) => {
          console.log("Error: ", err);
          mqttClient.end();
        });

        mqttClient.on("reconnect", () => {
          console.log("Reconnecting...");
        });

        mqttClient.on("connect", () => {
          console.log("Client connected:" + clientId);
        });

        // Received
        mqttClient.on("message", (topic, message, packet) => {
          console.log(
                  "Received Message: " + message.toString() + "\nOn topic: " + topic
          );
          const messageTextArea = document.querySelector("#message");
          messageTextArea.value += message + "\r\n";
        });
      }

      function subscribeToTopic() {
        const status = document.querySelector("#status");
        const topic = document.querySelector("#topic").value.trim();
        console.log(`Subscribing to Topic: ${topic}`);

        mqttClient.subscribe(topic, { qos: 0 });
        status.style.color = "green";
        status.value = "SUBSCRIBED";
      }

      function unsubscribeToTopic() {
        const status = document.querySelector("#status");
        const topic = document.querySelector("#topic").value.trim();
        console.log(`Unsubscribing to Topic: ${topic}`);

        mqttClient.unsubscribe(topic, { qos: 0 });
        status.style.color = "red";
        status.value = "UNSUBSCRIBED";
      }

    </script>
  </body>
</html>
